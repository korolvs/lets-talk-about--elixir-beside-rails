doctype html
html
  head
    title Lets talk about ... Elixir beside Rails
    meta(charset='utf-8')
    script(src='assets/vendor/slides.js')
    link(href='styles.css'  rel='stylesheet' type='text/css')
  body
    section.slides.layout-regular.template-default
      article.section
        h2 Lets talk about...
        h1 Elixir beside Rails
      article
        h2 What I'm going to talk about
        ul.build
          li Elixir and Phoenix
          li Channels in Phoenix vs Action Cable in Rails
          li Connecting Phoenix and Rails
          li Chat Application overview
          li Code overview
      article.section
        h2 Elixir and Phoenix
      article
        h2 Elixir
        ul.build
          li Functional
          li Leverages Erlang VM
          li Fault-tolerance
          li Scalability
          li Ruby-like syntax
          li A lot more...
      article
        h2 Code example
        pre
          |defmodule Sample do
          |  def hello(name), do: "Hello, #{name}"
          |  def hello, do: "Hello, nameless"
          |end
          |
          |IO.puts Sample.hello("Dany") # Hello, Dany
          |IO.puts Sample.hello # Hello, nameless
      article
        h2 Phoenix
        ul.build
          li MVC framework
          li Mostly Elixir
          li Productivity
          li Explicit > Implicit
          li A lot more...
      article
        h2 Code example
        pre
          |plug :find_user
          |
          |def show(conn, %{"id" => id}) do
          |  post = conn.assigns.user |> assoc(:posts) |> Repo.get(id)
          |  render conn, "show.html", post: post
          |end
          |
          |defp find_user(conn, _) do
          |  assign(conn, :user, Repo.get(User, conn.params["user_id"]))
          |end
      article.section
        h2 Channels in Phoenix
        h2 vs
        h2 Action Cable in Rails
      article
        h2 What can Phoenix channels do
        ul.build
          li Phoenix Channels can handle 2m connections on one server...
          li ...really huge server (40core/128gb)...
          li ...with code tuned and optimized by core members...
          li ...but still very impressive!
      article
        h2 What problems does Active Cable have
        ul.build
          li Memory leaks
          li Ruby(and Rails) is slow
          li Scalability
      article.image(data-src="assets/images/comparsion.png")
      article.section
        h2 Chat Application overview
      article
        h2 El Chat
        ul.build
          li Send messages to other users
          li Save messages
          li Unread message notifications
      article
        h2 What you need to add to existing App
        pre
          |ElChatCredentials = {
          |  user_id: 1,
          |  user_name: 'Slava',
          |  token: 'n2pUi8275EgJYFlv2o5vfjc8rFipbaknwK3knQ0hUPVU='
          |};
          |
          |ElChatUsers = [...];
          |ElChatUrl = "ws://server_url/socket";
          |startElChat();
      article
        h2 Message
        ul.build
          li ID
          li Room
          li User ID
          li Opponent ID
          li Sent at
          li Text
      article.image(data-src="assets/images/chat1.png")
      article.image(data-src="assets/images/chat2.png")
      article.section
        h2 Code overview
      article
        h2 Authentication
        pre
          |def connect(%{"token" => token, "user_id" => user_id, "user_name" => user_name}, socket) do
          |  if Helper.ensure_hash(token, "#{user_id}:#{user_name}") do
          |    {:ok, socket |> assign(:user_id, user_id)}
          |  else
          |    {:error, %{reason: "unauthorized"}}
          |  end
          |end
      article
        h2 Unread messages
        pre
          |def handle_info(:after_join, socket) do
          |  users = from(m in Message,
          |    where: (m.opponent_id == ^socket.assigns.user_id and m.is_delivered == false),
          |    select: m.user_id,
          |    distinct: true)
          |    |> Repo.all
          |  push socket, "init:usr", %{users: users}
          |  {:noreply, socket}
          |end
      article
        h2 Handle new messages
        pre(style="font-size:2vw")
          |def handle_in("new:msg", msg, socket) do
          |  ...
          |  case Message.changeset(%Message{}, changes) |> Repo.insert do
          |    {:ok, message} ->
          |      broadcast! socket, "new:msg", message
          |      if Enum.count(Presence.list(socket)) == 1 do
          |        ElChatWeb.Endpoint.broadcast!("user:#{opponent_id}", "new:msg", %{user_id: socket.assigns.user_id})
          |      end
          |    {:error, _changeset} -> nil
          |  end
          |  {:reply, :ok, socket}
          |end
      article.section
        h2 Whats next
      article
        h2 About Elixir and Phoenix
        ul.build
          li
            a(href="https://medium.com/@korolvs/elixir-beside-rails") medium.com/@korolvs/elixir-beside-rails
          li
            a(href="https://elixir-lang.org/") elixir-lang.org
          li
            a(href="http://phoenixframework.org/") phoenixframework.org
          li
            a(href="http://phoenixframework.org/blog/the-road-to-2-million-websocket-connections") phoenixframework.org/blog/the-road-to-2-million-websocket-connections
          li
            a(href="https://dockyard.com/blog/2016/08/09/phoenix-channels-vs-rails-action-cable") dockyard.com/blog/2016/08/09/phoenix-channels-vs-rails-action-cable
      article
        h2 About me
        ul.build
          li
            a(href="http://korolvs.com") korolvs.com
          li
            a(href="http://medium.com/@korolvs") medium.com/@korolvs
          li
            a(href="https://github.com/korolvs") github.com/korolvs
      article.section
        h2 Thank you

    script(src='assets/scripts/main.js')
